# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import List, Union, Optional
from datetime import datetime
from typing_extensions import Literal, TypeAlias

from pydantic import Field as FieldInfo

from ..._models import BaseModel

__all__ = [
    "MessageCreateResponse",
    "AssistantMessage",
    "FunctionCall",
    "FunctionCallDelta",
    "FunctionCallMessage",
    "FunctionCallMessageFunctionCall",
    "FunctionCallMessageFunctionCallFunctionCall",
    "FunctionCallMessageFunctionCallFunctionCallDelta",
    "FunctionReturn",
    "InternalMonologue",
    "LettaUsageStatistics",
    "Message",
    "MessageToolCall",
    "MessageToolCallFunction",
    "SystemMessage",
    "ToolCall",
    "ToolCallFunction",
    "UserMessage",
]


class AssistantMessage(BaseModel):
    id: str

    assistant_message: str

    date: datetime

    message_type: Optional[Literal["assistant_message"]] = None


class FunctionCall(BaseModel):
    arguments: str

    function_call_id: str

    name: str


class FunctionCallDelta(BaseModel):
    arguments: Optional[str] = None

    function_call_id: Optional[str] = None

    name: Optional[str] = None


class FunctionCallMessageFunctionCallFunctionCall(BaseModel):
    arguments: str

    function_call_id: str

    name: str


class FunctionCallMessageFunctionCallFunctionCallDelta(BaseModel):
    arguments: Optional[str] = None

    function_call_id: Optional[str] = None

    name: Optional[str] = None


FunctionCallMessageFunctionCall: TypeAlias = Union[
    FunctionCallMessageFunctionCallFunctionCall, FunctionCallMessageFunctionCallFunctionCallDelta
]


class FunctionCallMessage(BaseModel):
    id: str

    date: datetime

    function_call: FunctionCallMessageFunctionCall

    message_type: Optional[Literal["function_call"]] = None


class FunctionReturn(BaseModel):
    id: str

    date: datetime

    function_call_id: str

    function_return: str

    status: Literal["success", "error"]

    message_type: Optional[Literal["function_return"]] = None


class InternalMonologue(BaseModel):
    id: str

    date: datetime

    internal_monologue: str

    message_type: Optional[Literal["internal_monologue"]] = None


class LettaUsageStatistics(BaseModel):
    completion_tokens: Optional[int] = None
    """The number of tokens generated by the agent."""

    prompt_tokens: Optional[int] = None
    """The number of tokens in the prompt."""

    step_count: Optional[int] = None
    """The number of steps taken by the agent."""

    total_tokens: Optional[int] = None
    """The total number of tokens processed by the agent."""


class MessageToolCallFunction(BaseModel):
    arguments: str
    """The arguments to pass to the function (JSON dump)"""

    name: str
    """The name of the function to call"""


class MessageToolCall(BaseModel):
    id: str
    """The ID of the tool call"""

    function: MessageToolCallFunction
    """The arguments and name for the function"""

    type: Optional[str] = None


class Message(BaseModel):
    role: Literal["assistant", "user", "tool", "function", "system"]
    """The role of the participant."""

    id: Optional[str] = None
    """The human-friendly ID of the Message"""

    agent_id: Optional[str] = None
    """The unique identifier of the agent."""

    created_at: Optional[datetime] = None
    """The time the message was created."""

    model: Optional[str] = None
    """The model used to make the function call."""

    name: Optional[str] = None
    """The name of the participant."""

    text: Optional[str] = None
    """The text of the message."""

    tool_call_id: Optional[str] = None
    """The id of the tool call."""

    tool_calls: Optional[List[MessageToolCall]] = None
    """The list of tool calls requested."""

    user_id: Optional[str] = None
    """The unique identifier of the user."""


class SystemMessage(BaseModel):
    id: str

    date: datetime

    message: str

    message_type: Optional[Literal["system_message"]] = None


class ToolCallFunction(BaseModel):
    arguments: str
    """The arguments to pass to the function (JSON dump)"""

    name: str
    """The name of the function to call"""


class ToolCall(BaseModel):
    id: str
    """The ID of the tool call"""

    function: ToolCallFunction
    """The arguments and name for the function"""

    type: Optional[str] = None


class UserMessage(BaseModel):
    id: str

    date: datetime

    message: str

    message_type: Optional[Literal["user_message"]] = None


class MessageCreateResponse(BaseModel):
    assistant_message: Optional[AssistantMessage] = FieldInfo(alias="AssistantMessage", default=None)

    function_call: Optional[FunctionCall] = FieldInfo(alias="FunctionCall", default=None)

    function_call_delta: Optional[FunctionCallDelta] = FieldInfo(alias="FunctionCallDelta", default=None)

    function_call_message: Optional[FunctionCallMessage] = FieldInfo(alias="FunctionCallMessage", default=None)
    """
    A message representing a request to call a function (generated by the LLM to
    trigger function execution).

    Attributes: function_call (Union[FunctionCall, FunctionCallDelta]): The function
    call id (str): The ID of the message date (datetime): The date the message was
    created in ISO format
    """

    function_return: Optional[FunctionReturn] = FieldInfo(alias="FunctionReturn", default=None)
    """
    A message representing the return value of a function call (generated by Letta
    executing the requested function).

    Attributes: function_return (str): The return value of the function status
    (Literal["success", "error"]): The status of the function call id (str): The ID
    of the message date (datetime): The date the message was created in ISO format
    function_call_id (str): A unique identifier for the function call that generated
    this message
    """

    internal_monologue: Optional[InternalMonologue] = FieldInfo(alias="InternalMonologue", default=None)
    """Representation of an agent's internal monologue.

    Attributes: internal_monologue (str): The internal monologue of the agent id
    (str): The ID of the message date (datetime): The date the message was created
    in ISO format
    """

    letta_usage_statistics: Optional[LettaUsageStatistics] = FieldInfo(alias="LettaUsageStatistics", default=None)
    """Usage statistics for the agent interaction.

    Attributes: completion_tokens (int): The number of tokens generated by the
    agent. prompt_tokens (int): The number of tokens in the prompt. total_tokens
    (int): The total number of tokens processed by the agent. step_count (int): The
    number of steps taken by the agent.
    """

    message: Optional[Message] = FieldInfo(alias="Message", default=None)
    """Letta's internal representation of a message.

    Includes methods to convert to/from LLM provider formats.

    Attributes: id (str): The unique identifier of the message. role (MessageRole):
    The role of the participant. text (str): The text of the message. user_id (str):
    The unique identifier of the user. agent_id (str): The unique identifier of the
    agent. model (str): The model used to make the function call. name (str): The
    name of the participant. created_at (datetime): The time the message was
    created. tool_calls (List[ToolCall]): The list of tool calls requested.
    tool_call_id (str): The id of the tool call.
    """

    message_role: Optional[Literal["assistant", "user", "tool", "function", "system"]] = FieldInfo(
        alias="MessageRole", default=None
    )

    system_message: Optional[SystemMessage] = FieldInfo(alias="SystemMessage", default=None)
    """A message generated by the system.

    Never streamed back on a response, only used for cursor pagination.

    Attributes: message (str): The message sent by the system id (str): The ID of
    the message date (datetime): The date the message was created in ISO format
    """

    tool_call: Optional[ToolCall] = FieldInfo(alias="ToolCall", default=None)

    tool_call_function: Optional[ToolCallFunction] = FieldInfo(alias="ToolCallFunction", default=None)

    user_message: Optional[UserMessage] = FieldInfo(alias="UserMessage", default=None)
    """A message sent by the user.

    Never streamed back on a response, only used for cursor pagination.

    Attributes: message (str): The message sent by the user id (str): The ID of the
    message date (datetime): The date the message was created in ISO format
    """
