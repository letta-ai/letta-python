# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import List, Union, Optional
from datetime import datetime
from typing_extensions import Literal, TypeAlias

from pydantic import Field as FieldInfo

from ..._models import BaseModel

__all__ = [
    "MessageCreateResponse",
    "AssistantMessage",
    "LettaUsageStatistics",
    "ReasoningMessage",
    "SystemMessage",
    "ToolCall",
    "ToolCallDelta",
    "ToolCallMessage",
    "ToolCallMessageToolCall",
    "ToolCallMessageToolCallToolCall",
    "ToolCallMessageToolCallToolCallDelta",
    "ToolReturnMessage",
    "UsageMessage",
    "UsageMessageUsage",
    "UserMessage",
]


class AssistantMessage(BaseModel):
    id: str

    assistant_message: str

    date: datetime

    message_type: Optional[Literal["assistant_message"]] = None


class LettaUsageStatistics(BaseModel):
    completion_tokens: Optional[int] = None
    """The number of tokens generated by the agent."""

    prompt_tokens: Optional[int] = None
    """The number of tokens in the prompt."""

    step_count: Optional[int] = None
    """The number of steps taken by the agent."""

    total_tokens: Optional[int] = None
    """The total number of tokens processed by the agent."""


class ReasoningMessage(BaseModel):
    id: str

    date: datetime

    reasoning: str

    message_type: Optional[Literal["reasoning_message"]] = None


class SystemMessage(BaseModel):
    id: str

    date: datetime

    message: str

    message_type: Optional[Literal["system_message"]] = None


class ToolCall(BaseModel):
    arguments: str

    name: str

    tool_call_id: str


class ToolCallDelta(BaseModel):
    arguments: Optional[str] = None

    name: Optional[str] = None

    tool_call_id: Optional[str] = None


class ToolCallMessageToolCallToolCall(BaseModel):
    arguments: str

    name: str

    tool_call_id: str


class ToolCallMessageToolCallToolCallDelta(BaseModel):
    arguments: Optional[str] = None

    name: Optional[str] = None

    tool_call_id: Optional[str] = None


ToolCallMessageToolCall: TypeAlias = Union[ToolCallMessageToolCallToolCall, ToolCallMessageToolCallToolCallDelta]


class ToolCallMessage(BaseModel):
    id: str

    date: datetime

    tool_call: ToolCallMessageToolCall

    message_type: Optional[Literal["tool_call_message"]] = None


class ToolReturnMessage(BaseModel):
    id: str

    date: datetime

    status: Literal["success", "error"]

    tool_call_id: str

    tool_return: str

    message_type: Optional[Literal["tool_return_message"]] = None

    stderr: Optional[List[str]] = None

    stdout: Optional[List[str]] = None


class UsageMessageUsage(BaseModel):
    completion_tokens: Optional[int] = None
    """The number of tokens generated by the agent."""

    prompt_tokens: Optional[int] = None
    """The number of tokens in the prompt."""

    step_count: Optional[int] = None
    """The number of steps taken by the agent."""

    total_tokens: Optional[int] = None
    """The total number of tokens processed by the agent."""


class UsageMessage(BaseModel):
    id: str

    date: datetime

    usage: UsageMessageUsage
    """Usage statistics for the agent interaction.

    Attributes: completion_tokens (int): The number of tokens generated by the
    agent. prompt_tokens (int): The number of tokens in the prompt. total_tokens
    (int): The total number of tokens processed by the agent. step_count (int): The
    number of steps taken by the agent.
    """

    message_type: Optional[Literal["usage_message"]] = None


class UserMessage(BaseModel):
    id: str

    date: datetime

    message: str

    message_type: Optional[Literal["user_message"]] = None


class MessageCreateResponse(BaseModel):
    assistant_message: Optional[AssistantMessage] = FieldInfo(alias="AssistantMessage", default=None)

    letta_usage_statistics: Optional[LettaUsageStatistics] = FieldInfo(alias="LettaUsageStatistics", default=None)
    """Usage statistics for the agent interaction.

    Attributes: completion_tokens (int): The number of tokens generated by the
    agent. prompt_tokens (int): The number of tokens in the prompt. total_tokens
    (int): The total number of tokens processed by the agent. step_count (int): The
    number of steps taken by the agent.
    """

    reasoning_message: Optional[ReasoningMessage] = FieldInfo(alias="ReasoningMessage", default=None)
    """Representation of an agent's internal reasoning.

    Attributes: reasoning (str): The internal reasoning of the agent id (str): The
    ID of the message date (datetime): The date the message was created in ISO
    format
    """

    system_message: Optional[SystemMessage] = FieldInfo(alias="SystemMessage", default=None)
    """A message generated by the system.

    Never streamed back on a response, only used for cursor pagination.

    Attributes: message (str): The message sent by the system id (str): The ID of
    the message date (datetime): The date the message was created in ISO format
    """

    tool_call: Optional[ToolCall] = FieldInfo(alias="ToolCall", default=None)

    tool_call_delta: Optional[ToolCallDelta] = FieldInfo(alias="ToolCallDelta", default=None)

    tool_call_message: Optional[ToolCallMessage] = FieldInfo(alias="ToolCallMessage", default=None)
    """
    A message representing a request to call a tool (generated by the LLM to trigger
    tool execution).

    Attributes: tool_call (Union[ToolCall, ToolCallDelta]): The tool call id (str):
    The ID of the message date (datetime): The date the message was created in ISO
    format
    """

    tool_return_message: Optional[ToolReturnMessage] = FieldInfo(alias="ToolReturnMessage", default=None)
    """
    A message representing the return value of a tool call (generated by Letta
    executing the requested tool).

    Attributes: tool_return (str): The return value of the tool status
    (Literal["success", "error"]): The status of the tool call id (str): The ID of
    the message date (datetime): The date the message was created in ISO format
    tool_call_id (str): A unique identifier for the tool call that generated this
    message stdout (Optional[List(str)]): Captured stdout (e.g. prints, logs) from
    the tool invocation stderr (Optional[List(str)]): Captured stderr from the tool
    invocation
    """

    usage_message: Optional[UsageMessage] = FieldInfo(alias="UsageMessage", default=None)
    """A message representint the usage statistics for the agent interaction.

    Attributes: usage (LettaUsageStatistics): Usage statistics for the agent
    interaction.
    """

    user_message: Optional[UserMessage] = FieldInfo(alias="UserMessage", default=None)
    """A message sent by the user.

    Never streamed back on a response, only used for cursor pagination.

    Attributes: message (str): The message sent by the user id (str): The ID of the
    message date (datetime): The date the message was created in ISO format
    """
